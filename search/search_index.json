{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"wg-access-server \u00b6 wg-access-server is a single binary that provides a WireGuard VPN server and device management web ui. We support user authentication, 1 click device registration that works with Mac, Linux, Windows, Ios and Android including QR codes. You can configure different network isolation modes for better control and more. This project aims to deliver a simple VPN solution for developers, homelab enthusiasts and anyone else feeling adventurous. wg-access-server is a functional but young project. Contributes are welcome! Documentation \u00b6 See our documentation website Running with Docker \u00b6 Here's a quick command to run the server to try it out. docker run \\ -it \\ --rm \\ --cap-add NET_ADMIN \\ --device /dev/net/tun:/dev/net/tun \\ -v wg-access-server-data:/data \\ -e \"WIREGUARD_PRIVATE_KEY= $( wg genkey ) \" \\ -p 8000 :8000/tcp \\ -p 51820 :51820/udp \\ place1/wg-access-server If you open your browser using your LAN ip address you can even connect your phone to try it out: for example, i'll open my browser at http://192.168.0.XX:8000 using the local LAN IP address. You can connect to the web server on the local machine browser at http://localhost:8000 Running with Docker-Compose \u00b6 You modify the docker-compose.yml file for you need then run this following command. docker-compose up You can connect to the web server on the local machine browser at http://localhost:8000 If you open your browser to your machine's LAN IP address you'll be able to connect your phone using the UI and QR code! Screenshots \u00b6 Changelog \u00b6 See the CHANGELOG.md file Development \u00b6 The software is made up a Golang Server and React App. Here's how I develop locally: run cd website && npm install && npm start to get the frontend running on :3000 run sudo go run ./main.go to get the server running on :8000 Here are some notes about the development configuration: sudo is required because the server uses iptables/ip to configure the VPN networking you'll access the website on :3000 and it'll proxy API requests to :8000 thanks to webpack in-memory storage and generated wireguard keys will be used GRPC codegeneration: The client communicates with the server via gRPC-Web. You can edit the API specification in ./proto/*.proto . After changing a service or message definition you'll want to re-generate server and client code using: ./codegen.sh .","title":"Home"},{"location":"#wg-access-server","text":"wg-access-server is a single binary that provides a WireGuard VPN server and device management web ui. We support user authentication, 1 click device registration that works with Mac, Linux, Windows, Ios and Android including QR codes. You can configure different network isolation modes for better control and more. This project aims to deliver a simple VPN solution for developers, homelab enthusiasts and anyone else feeling adventurous. wg-access-server is a functional but young project. Contributes are welcome!","title":"wg-access-server"},{"location":"#documentation","text":"See our documentation website","title":"Documentation"},{"location":"#running-with-docker","text":"Here's a quick command to run the server to try it out. docker run \\ -it \\ --rm \\ --cap-add NET_ADMIN \\ --device /dev/net/tun:/dev/net/tun \\ -v wg-access-server-data:/data \\ -e \"WIREGUARD_PRIVATE_KEY= $( wg genkey ) \" \\ -p 8000 :8000/tcp \\ -p 51820 :51820/udp \\ place1/wg-access-server If you open your browser using your LAN ip address you can even connect your phone to try it out: for example, i'll open my browser at http://192.168.0.XX:8000 using the local LAN IP address. You can connect to the web server on the local machine browser at http://localhost:8000","title":"Running with Docker"},{"location":"#running-with-docker-compose","text":"You modify the docker-compose.yml file for you need then run this following command. docker-compose up You can connect to the web server on the local machine browser at http://localhost:8000 If you open your browser to your machine's LAN IP address you'll be able to connect your phone using the UI and QR code!","title":"Running with Docker-Compose"},{"location":"#screenshots","text":"","title":"Screenshots"},{"location":"#changelog","text":"See the CHANGELOG.md file","title":"Changelog"},{"location":"#development","text":"The software is made up a Golang Server and React App. Here's how I develop locally: run cd website && npm install && npm start to get the frontend running on :3000 run sudo go run ./main.go to get the server running on :8000 Here are some notes about the development configuration: sudo is required because the server uses iptables/ip to configure the VPN networking you'll access the website on :3000 and it'll proxy API requests to :8000 thanks to webpack in-memory storage and generated wireguard keys will be used GRPC codegeneration: The client communicates with the server via gRPC-Web. You can edit the API specification in ./proto/*.proto . After changing a service or message definition you'll want to re-generate server and client code using: ./codegen.sh .","title":"Development"},{"location":"configuration/","text":"Configuration \u00b6 Environment Variables \u00b6 Variable Description CONFIG Set the config file path WIREGUARD_PRIVATE_KEY Set the wireguard private key STORAGE_DIRECTORY Set the directory where device config will be persisted ADMIN_USERNAME Set the username (subject) for the admin account ADMIN_PASSWORD Set the admin account's password. The admin account will be a basic-auth user. Leave blank if your admin username authenticates via a configured authentication backend. UPSTREAM_DNS Set the upstream DNS server to proxy client DNS requests to. If empty, resolv.conf will be respected. LOG_LEVEL Set the server's log level (debug, info , error, critical) DISABLE_METADATA If true, the server will not record device level metadata such as the last handshake time, tx/rx data size CLI Flags \u00b6 All environment variables can be configured via a CLI flag as well. For example you can configure STORAGE_DIRECTORY by passing --storage-directory=\"<value>\" . Config File (config.yaml) \u00b6 Here's an annotated config file example: loglevel : debug storage : # Directory that VPN devices (WireGuard peers) # should be saved under. # If this value is empty then an InMemory storage # backend will be used (not recommended). # Defaults to \"/data\" inside the docker container directory : /data wireguard : # The network interface name for wireguard # Optional interfaceName : wg0 # The WireGuard PrivateKey # You can generate this value using \"$ wg genkey\" # If this value is empty then the server will use an in-memory # generated key privateKey : \"\" # ExternalAddress is the address that clients # use to connect to the wireguard interface # By default, this will be empty and the web ui # will use the current page's origin i.e. window.location.origin # Optional externalHost : \"\" # The WireGuard ListenPort # Optional port : 51820 } ` yaml:\"wireguard\"` vpn : # CIDR configures a network address space # that client (WireGuard peers) will be allocated # an IP address from. # Optional cidr : \"10.44.0.0/24\" # GatewayInterface will be used in iptable forwarding # rules that send VPN traffic from clients to this interface # Most use-cases will want this interface to have access # to the outside internet # If not configured then the server will select the default # network interface e.g. eth0 # Optional gatewayInterface : \"\" // Rules allows you to configure what level // of network isolation should be enfoced. rules : # AllowVPNLAN enables routing between VPN clients # i.e. allows the VPN to work like a LAN. # true by default # Optional allowVPNLAN : true # AllowServerLAN enables routing to private IPv4 # address ranges. Enabling this will allow VPN clients # to access networks on the server's LAN. # true by default # Optional allowServerLAN : true # AllowInternet enables routing of all traffic # to the public internet. # true by default # Optional allowInternet : true # AllowedNetworks allows you to whitelist a partcular # network CIDR. This is useful if you want to block # access to the Server's LAN but allow access to a few # specific IPs or a small range. # e.g. \"192.0.2.0/24\" or \"192.0.2.10/32\". # no networks are whitelisted by default (empty array) # Optional allowedNetworks : [] dns : # upstream DNS servers. # that the server-side DNS proxy will forward requests to. # By default /etc/resolv.conf will be used to find upstream # DNS servers. # Optional upstream : - \"1.1.1.1\" # Auth configures optional authentication backends # to controll access to the web ui. # Devices will be managed on a per-user basis if any # auth backends are configured. # If no authentication backends are configured then # the server will not require any authentication. # It's recommended to make use of basic authentication # or use an upstream HTTP proxy that enforces authentication # Optional auth : # HTTP Basic Authentication basic : # Users is a list of htpasswd encoded username:password pairs # supports BCrypt, Sha, Ssha, Md5 # You can create a user using \"htpasswd -nB <username>\" users : [] oidc : name : \"\" issuer : \"\" clientID : \"\" clientSecret : \"\" scopes : \"\" redirectURL : \"\" # Optionally restrict login to users with an allowed email domain # if empty or omitted, any email domain will be allowed. emailDomains : - example.com gitlab : name : \"\" baseURL : \"\" clientID : \"\" clientSecret : \"\" redirectURL : \"\" # Optionally restrict login to users with an allowed email domain # if empty or omitted, any email domain will be allowed. emailDomains : - example.com","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#environment-variables","text":"Variable Description CONFIG Set the config file path WIREGUARD_PRIVATE_KEY Set the wireguard private key STORAGE_DIRECTORY Set the directory where device config will be persisted ADMIN_USERNAME Set the username (subject) for the admin account ADMIN_PASSWORD Set the admin account's password. The admin account will be a basic-auth user. Leave blank if your admin username authenticates via a configured authentication backend. UPSTREAM_DNS Set the upstream DNS server to proxy client DNS requests to. If empty, resolv.conf will be respected. LOG_LEVEL Set the server's log level (debug, info , error, critical) DISABLE_METADATA If true, the server will not record device level metadata such as the last handshake time, tx/rx data size","title":"Environment Variables"},{"location":"configuration/#cli-flags","text":"All environment variables can be configured via a CLI flag as well. For example you can configure STORAGE_DIRECTORY by passing --storage-directory=\"<value>\" .","title":"CLI Flags"},{"location":"configuration/#config-file-configyaml","text":"Here's an annotated config file example: loglevel : debug storage : # Directory that VPN devices (WireGuard peers) # should be saved under. # If this value is empty then an InMemory storage # backend will be used (not recommended). # Defaults to \"/data\" inside the docker container directory : /data wireguard : # The network interface name for wireguard # Optional interfaceName : wg0 # The WireGuard PrivateKey # You can generate this value using \"$ wg genkey\" # If this value is empty then the server will use an in-memory # generated key privateKey : \"\" # ExternalAddress is the address that clients # use to connect to the wireguard interface # By default, this will be empty and the web ui # will use the current page's origin i.e. window.location.origin # Optional externalHost : \"\" # The WireGuard ListenPort # Optional port : 51820 } ` yaml:\"wireguard\"` vpn : # CIDR configures a network address space # that client (WireGuard peers) will be allocated # an IP address from. # Optional cidr : \"10.44.0.0/24\" # GatewayInterface will be used in iptable forwarding # rules that send VPN traffic from clients to this interface # Most use-cases will want this interface to have access # to the outside internet # If not configured then the server will select the default # network interface e.g. eth0 # Optional gatewayInterface : \"\" // Rules allows you to configure what level // of network isolation should be enfoced. rules : # AllowVPNLAN enables routing between VPN clients # i.e. allows the VPN to work like a LAN. # true by default # Optional allowVPNLAN : true # AllowServerLAN enables routing to private IPv4 # address ranges. Enabling this will allow VPN clients # to access networks on the server's LAN. # true by default # Optional allowServerLAN : true # AllowInternet enables routing of all traffic # to the public internet. # true by default # Optional allowInternet : true # AllowedNetworks allows you to whitelist a partcular # network CIDR. This is useful if you want to block # access to the Server's LAN but allow access to a few # specific IPs or a small range. # e.g. \"192.0.2.0/24\" or \"192.0.2.10/32\". # no networks are whitelisted by default (empty array) # Optional allowedNetworks : [] dns : # upstream DNS servers. # that the server-side DNS proxy will forward requests to. # By default /etc/resolv.conf will be used to find upstream # DNS servers. # Optional upstream : - \"1.1.1.1\" # Auth configures optional authentication backends # to controll access to the web ui. # Devices will be managed on a per-user basis if any # auth backends are configured. # If no authentication backends are configured then # the server will not require any authentication. # It's recommended to make use of basic authentication # or use an upstream HTTP proxy that enforces authentication # Optional auth : # HTTP Basic Authentication basic : # Users is a list of htpasswd encoded username:password pairs # supports BCrypt, Sha, Ssha, Md5 # You can create a user using \"htpasswd -nB <username>\" users : [] oidc : name : \"\" issuer : \"\" clientID : \"\" clientSecret : \"\" scopes : \"\" redirectURL : \"\" # Optionally restrict login to users with an allowed email domain # if empty or omitted, any email domain will be allowed. emailDomains : - example.com gitlab : name : \"\" baseURL : \"\" clientID : \"\" clientSecret : \"\" redirectURL : \"\" # Optionally restrict login to users with an allowed email domain # if empty or omitted, any email domain will be allowed. emailDomains : - example.com","title":"Config File (config.yaml)"},{"location":"deployment/1-docker/","text":"Docker \u00b6 TL;DR; \u00b6 Here's a one-liner to run wg-access-server: docker run --rm -it --cap-add NET_ADMIN \\ --device /dev/net/tun:/dev/net/tun \\ -p 8000 :8000/tcp \\ -p 51820 :51820/udp \\ place1/wg-access-server","title":"Docker"},{"location":"deployment/1-docker/#docker","text":"","title":"Docker"},{"location":"deployment/1-docker/#tldr","text":"Here's a one-liner to run wg-access-server: docker run --rm -it --cap-add NET_ADMIN \\ --device /dev/net/tun:/dev/net/tun \\ -p 8000 :8000/tcp \\ -p 51820 :51820/udp \\ place1/wg-access-server","title":"TL;DR;"},{"location":"deployment/2-docker-compose/","text":"Docker Compose \u00b6 You can run wg-access-server using the following example docker Docker Compose file. Checkout the configuration docs to learn how wg-access-server can be configured. version : \"3.7\" services : wg-access-server : # to build the docker image from the source # build: # dockerfile: Dockerfile # context: . image : place1/wg-access-server container_name : wg-access-server cap_add : - NET_ADMIN volumes : - \"wg-access-server-data:/data\" # - \"./config.yaml:/config.yaml\" # if you have a custom config file ports : - \"8000:8000/tcp\" - \"51820:51820/udp\" devices : - \"/dev/net/tun:/dev/net/tun\" # shared volumes with the host volumes : wg-access-server-data : driver : local","title":"Docker Compose"},{"location":"deployment/2-docker-compose/#docker-compose","text":"You can run wg-access-server using the following example docker Docker Compose file. Checkout the configuration docs to learn how wg-access-server can be configured. version : \"3.7\" services : wg-access-server : # to build the docker image from the source # build: # dockerfile: Dockerfile # context: . image : place1/wg-access-server container_name : wg-access-server cap_add : - NET_ADMIN volumes : - \"wg-access-server-data:/data\" # - \"./config.yaml:/config.yaml\" # if you have a custom config file ports : - \"8000:8000/tcp\" - \"51820:51820/udp\" devices : - \"/dev/net/tun:/dev/net/tun\" # shared volumes with the host volumes : wg-access-server-data : driver : local","title":"Docker Compose"},{"location":"deployment/3-kubernetes/","text":"Helm Chart \u00b6 Installing the Chart \u00b6 To install the chart with the release name my-release : $ helm install my-release --repo https://place1.github.io/wg-access-server wg-access-server The command deploys wg-access-server on the Kubernetes cluster in the default configuration. The configuration section lists the parameters that can be configured during installation. By default an in-memory wireguard private key will be generated and devices will not persist between pod restarts. Uninstalling the Chart \u00b6 To uninstall/delete the my-release deployment: $ helm delete my-release The command removes all the Kubernetes components associated with the chart and deletes the release. Example values.yaml \u00b6 config : wireguard : externalHost : \"<loadbalancer-ip>:51820\" wireguard : config : privateKey : \"<wireguard-private-key>\" service : type : \"LoadBalancer\" persistence : enabled : true ingress : enabled : true hosts : [ \"vpn.example.com\" ] tls : - hosts : [ \"vpn.example.com\" ] secretName : \"tls-wg-access-server\" All Configuration \u00b6 Key Type Default Description config object {} inline wg-access-server config (config.yaml) wireguard.config.privateKey string \"\" A wireguard private key. You can generate one using $ wg genkey wireguard.service.type string \"ClusterIP\" ingress.enabled bool false ingress.hosts string nil ingress.tls list [] ingress.annotations object {} persistence.enabled bool false persistence.size string \"100Mi\" persistence.subPath string \"\" persistence.annotations object {} persistence.accessModes[0] string \"ReadWriteOnce\" strategy.type string \"Recreate\" resources object {} pod cpu/memory resource requests and limits nameOverride string \"\" fullnameOverride string \"\" affinity object {} nodeSelector object {} tolerations list [] image.pullPolicy string \"IfNotPresent\" image.repository string \"place1/wg-access-server\" imagePullSecrets list []","title":"Helm Chart"},{"location":"deployment/3-kubernetes/#helm-chart","text":"","title":"Helm Chart"},{"location":"deployment/3-kubernetes/#installing-the-chart","text":"To install the chart with the release name my-release : $ helm install my-release --repo https://place1.github.io/wg-access-server wg-access-server The command deploys wg-access-server on the Kubernetes cluster in the default configuration. The configuration section lists the parameters that can be configured during installation. By default an in-memory wireguard private key will be generated and devices will not persist between pod restarts.","title":"Installing the Chart"},{"location":"deployment/3-kubernetes/#uninstalling-the-chart","text":"To uninstall/delete the my-release deployment: $ helm delete my-release The command removes all the Kubernetes components associated with the chart and deletes the release.","title":"Uninstalling the Chart"},{"location":"deployment/3-kubernetes/#example-valuesyaml","text":"config : wireguard : externalHost : \"<loadbalancer-ip>:51820\" wireguard : config : privateKey : \"<wireguard-private-key>\" service : type : \"LoadBalancer\" persistence : enabled : true ingress : enabled : true hosts : [ \"vpn.example.com\" ] tls : - hosts : [ \"vpn.example.com\" ] secretName : \"tls-wg-access-server\"","title":"Example values.yaml"},{"location":"deployment/3-kubernetes/#all-configuration","text":"Key Type Default Description config object {} inline wg-access-server config (config.yaml) wireguard.config.privateKey string \"\" A wireguard private key. You can generate one using $ wg genkey wireguard.service.type string \"ClusterIP\" ingress.enabled bool false ingress.hosts string nil ingress.tls list [] ingress.annotations object {} persistence.enabled bool false persistence.size string \"100Mi\" persistence.subPath string \"\" persistence.annotations object {} persistence.accessModes[0] string \"ReadWriteOnce\" strategy.type string \"Recreate\" resources object {} pod cpu/memory resource requests and limits nameOverride string \"\" fullnameOverride string \"\" affinity object {} nodeSelector object {} tolerations list [] image.pullPolicy string \"IfNotPresent\" image.repository string \"place1/wg-access-server\" imagePullSecrets list []","title":"All Configuration"}]}